import aiohttp
import random
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio

# ржЗржЙржЬрж╛рж░рзЗрж░ рждржерзНржп рж╕ржВрж░ржХрзНрж╖ржгрзЗрж░ ржЬржирзНржп ржбрж┐ржХрж╢ржирж╛рж░рж┐
user_data = {}

# /start рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    user_data[user_id] = {
        "anime": None,
        "thumbnail_link": None,
        "anime_number": None,
        "season_number": None,
        "episodes": [] # ржПржкрж┐рж╕рзЛржбрзЗрж░ ржбрзЗржЯрж╛ рж▓рж┐рж╕рзНржЯ
    }
    await update.message.reply_text("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржирж┐ржорзЗрж░ ржирж╛ржо ржжрж┐ржи:")

# ржЗржЙржЬрж╛рж░ ржЗржиржкрзБржЯ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ
async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    if user_id not in user_data:
        await update.message.reply_text("ржкрзНрж░ржержорзЗ /start ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи")
        return

    user_info = user_data[user_id]
    text = update.message.text.strip()

    if user_info["anime"] is None:
        user_info["anime"] = text
        await update.message.reply_text("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржирж┐ржорзЗрж░ ржерж╛ржорзНржмржирзЗржЗрж▓ рж▓рж┐ржВржХ ржжрж┐ржи:")
    elif user_info["thumbnail_link"] is None:
        user_info["thumbnail_link"] = text
        await update.message.reply_text("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржирж┐ржорзЗ ржиржорзНржмрж░ ржжрж┐ржи:")
    elif user_info["anime_number"] is None:
        user_info["anime_number"] = text
        await update.message.reply_text("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржирж┐ржорзЗ рж╕рж┐ржЬржи ржиржорзНржмрж░ ржжрж┐ржи:")
    elif user_info["season_number"] is None:
        user_info["season_number"] = text
        user_info["episodes"].append({
            "episode": None,
            "facebook_link": None,
            "title": None,
            "description": None,
            "hd_link": None,
            "sd_link": None
        })
        await update.message.reply_text("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержо ржПржкрж┐рж╕рзЛржбрзЗрж░ ржиржорзНржмрж░ ржжрж┐ржи:")
    elif not user_info["episodes"]:
        pass
    else:
        current_episode_data = user_info["episodes"][-1]

        if current_episode_data["episode"] is None:
            current_episode_data["episode"] = text
            await update.message.reply_text("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржлрзЗрж╕ржмрзБржХ ржнрж┐ржбрж┐ржУ рж▓рж┐ржВржХ ржжрж┐ржи:")
        elif current_episode_data["facebook_link"] is None:
            current_episode_data["facebook_link"] = text
            await update.message.reply_text("ржнрж┐ржбрж┐ржУ рждржерзНржп ржпрзБржХрзНржд рж╣ржпрж╝рзЗржЫрзЗред ржЖржкржирж┐ ржХрж┐ ржЕржирзНржп ржПржкрж┐рж╕рзЛржб ржпрзЛржЧ ржХрж░рждрзЗ ржЪрж╛ржи? рж╣рзНржпрж╛ржБ ржЕржержмрж╛ ржирж╛ рж▓рж┐ржЦрзБржи") #Just collect info, AI content will be generated on /send
        else:
            if text.isdigit():
                user_info["episodes"].append({
                    "episode": text,
                    "facebook_link": None,
                    "title": None,
                    "description": None,
                    "hd_link": None,
                    "sd_link": None
                })
                await update.message.reply_text("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржлрзЗрж╕ржмрзБржХ ржнрж┐ржбрж┐ржУ рж▓рж┐ржВржХ ржжрж┐ржи:")
            elif text.lower() == '/send':
                await show_preview_all(update, context)
            else:
                await update.message.reply_text("ржЗржиржкрзБржЯ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржП рж╕ржорж╕рзНржпрж╛ред /start ржжрж┐ржпрж╝рзЗ ржЖржмрж╛рж░ рж╢рзБрж░рзБ ржХрж░рзБржи ржЕржержмрж╛ ржПржкрж┐рж╕рзЛржб ржиржорзНржмрж░ рж▓рж┐ржЦрзБржиред")



async def generate_ai_content_for_send(anime, episode, random_id): # Modified AI content generation function for /send
    episode_data = {
            "title": None,
            "description": None,
        }
    try:
        async with aiohttp.ClientSession() as session:
            # ржбрзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржЬрзЗржирж╛рж░рзЗржЯ
            desc_params = {
                "q": f"Write a description for episode number {episode} of {anime}. 20-25 words. Only description.",
                "id": random_id
            }
            async with session.get("https://new-ai-buxr.onrender.com/ai", params=desc_params) as response:
                desc_response = await response.json()
                episode_data["description"] = desc_response.get("response", "ржбрзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛!")

            # ржЯрж╛ржЗржЯрзЗрж▓ ржЬрзЗржирж╛рж░рзЗржЯ
            title_params = {
                "q": f"Write the title of episode number {episode} of {anime}. Only title and No additional symbols or text may be written. There's no need to bold the text, just give it normally.",
                "id": random_id
            }
            async with session.get("https://new-ai-buxr.onrender.com/ai", params=title_params) as response:
                title_response = await response.json()
                episode_data["title"] = title_response.get("response", "ржЯрж╛ржЗржЯрзЗрж▓ ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛!")
        return episode_data
    except Exception as e:
        return {"error": f"ржПржЖржЗ ржХржиржЯрзЗржирзНржЯ ржЬрзЗржирж╛рж░рзЗрж╢ржирзЗ рждрзНрж░рзБржЯрж┐: {str(e)}"}


# ржкрзНрж░рж┐ржнрж┐ржЙ ржорзЗрж╕рзЗржЬ ржжрзЗржЦрж╛ржирзЛ (current episode) - Not needed anymore in this logic flow
async def show_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    user_info = user_data[user_id]
    current_episode_data = user_info["episodes"][-1]

    preview_message = (
        "ЁЯОм ржкрзНрж░рж┐ржнрж┐ржЙ (ржПржкрж┐рж╕рзЛржб):\n\n"
        f"ЁЯУ║ ржПржирж┐ржорзЗ: {user_info['anime']}\n"
        f"ЁЯФв ржПржкрж┐рж╕рзЛржб: {current_episode_data['episode']}\n"
        f"ЁЯОм ржЯрж╛ржЗржЯрзЗрж▓: ржЬрзЗржирж╛рж░рзЗржЯ рж╣ржмрзЗ рж╕рзЗржирзНржб ржХрж░рж╛рж░ ржкрж░\n" # ржЯрж╛ржЗржЯрзЗрж▓ ржПржЦржи ржЬрзЗржирж╛рж░рзЗржЯ рж╣ржмрзЗ ржирж╛
        f"ЁЯУЭ ржбрзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи: ржЬрзЗржирж╛рж░рзЗржЯ рж╣ржмрзЗ рж╕рзЗржирзНржб ржХрж░рж╛рж░ ржкрж░\n" # ржбрзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржПржЦржи ржЬрзЗржирж╛рж░рзЗржЯ рж╣ржмрзЗ ржирж╛
        f"ЁЯЦ╝я╕П ржерж╛ржоржирж╛ржЗрж▓ рж▓рж┐ржВржХ: {user_info['thumbnail_link']}\n"
        f"ЁЯФЧ ржлрзЗрж╕ржмрзБржХ ржнрж┐ржбрж┐ржУ рж▓рж┐ржВржХ: {current_episode_data['facebook_link']}\n"
        f"ЁЯФв ржПржирж┐ржорзЗ ржиржорзНржмрж░: {user_info['anime_number']}\n"
        f"ЁЯФв рж╕рж┐ржЬржи ржиржорзНржмрж░: {user_info['season_number']}\n"
        f"ЁЯФЧ HD рж▓рж┐ржВржХ: ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржХрж░рж╛рж░ ржкрж░ ржкрж╛ржУрзЯрж╛ ржпрж╛ржмрзЗ\n" # HD link will be processed later
        f"ЁЯФЧ SD рж▓рж┐ржВржХ: ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржХрж░рж╛рж░ ржкрж░ ржкрж╛ржУрзЯрж╛ ржпрж╛ржмрзЗ\n\n" # SD link will be processed later
        "ржпржжрж┐ ржЕржирзНржп ржПржкрж┐рж╕рзЛржб ржпрзЛржЧ ржХрж░рждрзЗ ржЪрж╛ржи, ржПржкрж┐рж╕рзЛржб ржиржорзНржмрж░ рж▓рж┐ржЦрзБржи ржЕржержмрж╛ /send рж▓рж┐ржЦрзЗ рж╢рзЗрж╖ ржХрж░рзБржиред"
    )
    await update.message.reply_text(preview_message)

# рж╕ржХрж▓ ржПржкрж┐рж╕рзЛржбрзЗрж░ ржкрзНрж░рж┐ржнрж┐ржЙ ржжрзЗржЦрж╛ржирзЛ
async def show_preview_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    user_info = user_data[user_id]

    preview_message_all = "ЁЯОм рж╕ржХрж▓ ржПржкрж┐рж╕рзЛржбрзЗрж░ ржкрзНрж░рж┐ржнрж┐ржЙ:\n\n"
    for episode_data in user_info["episodes"]:
        preview_message_all += (
            f"ЁЯУ║ ржПржирж┐ржорзЗ: {user_info['anime']}\n"
            f"ЁЯФв ржПржкрж┐рж╕рзЛржб: {episode_data['episode']}\n"
            f"ЁЯОм ржЯрж╛ржЗржЯрзЗрж▓: ржЬрзЗржирж╛рж░рзЗржЯ рж╣ржмрзЗ рж╕рзЗржирзНржб ржХрж░рж╛рж░ ржкрж░\n" # ржЯрж╛ржЗржЯрзЗрж▓ ржПржЦржи ржЬрзЗржирж╛рж░рзЗржЯ рж╣ржмрзЗ ржирж╛
            f"ЁЯУЭ ржбрзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи: ржЬрзЗржирж╛рж░рзЗржЯ рж╣ржмрзЗ рж╕рзЗржирзНржб ржХрж░рж╛рж░ ржкрж░\n" # ржбрзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржПржЦржи ржЬрзЗржирж╛рж░рзЗржЯ рж╣ржмрзЗ ржирж╛
            f"ЁЯЦ╝я╕П ржерж╛ржоржирж╛ржЗрж▓ рж▓рж┐ржВржХ: {user_info['thumbnail_link']}\n"
            f"ЁЯФЧ ржлрзЗрж╕ржмрзБржХ ржнрж┐ржбрж┐ржУ рж▓рж┐ржВржХ: {episode_data['facebook_link']}\n"
            f"ЁЯФв ржПржирж┐ржорзЗ ржиржорзНржмрж░: {user_info['anime_number']}\n"
            f"ЁЯФв рж╕рж┐ржЬржи ржиржорзНржмрж░: {user_info['season_number']}\n"
            f"ЁЯФЧ HD рж▓рж┐ржВржХ: ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржХрж░рж╛рж░ ржкрж░ ржкрж╛ржУрзЯрж╛ ржпрж╛ржмрзЗ\n" # HD link will be processed later
            f"ЁЯФЧ SD рж▓рж┐ржВржХ: ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржХрж░рж╛рж░ ржкрж░ ржкрж╛ржУрзЯрж╛ ржпрж╛ржмрзЗ\n\n" # SD link will be processed later
            "------------------------\n"
        )
    preview_message_all += "ржпржжрж┐ рж╕ржм рждржерзНржп рж╕ржарж┐ржХ ржерж╛ржХрзЗ, /send рж▓рж┐ржЦрзЗ ржнрж┐ржбрж┐ржУржЧрзБрж▓рзЛ ржпрзБржХрзНржд ржХрж░рзБржиред"
    await update.message.reply_text(preview_message_all)


# ржбрзЗржЯрж╛ рж╕рзЗржирзНржб ржХрж░рж╛рж░ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def send_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    if user_id not in user_data:
        await update.message.reply_text("ржкрзНрж░ржержорзЗ /start ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи")
        return

    user_info = user_data[user_id]
    episodes_data = user_info["episodes"]

    if not episodes_data:
        await update.message.reply_text("ржХрзЛржи ржПржкрж┐рж╕рзЛржб рждржерзНржп ржирзЗржЗред")
        return

    await update.message.reply_text(f"ржорзЛржЯ {len(episodes_data)} ржПржкрж┐рж╕рзЛржб ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")

    success_messages = []
    error_messages = []

    for episode_index, episode_data in enumerate(episodes_data):
        try:
            await update.message.reply_text(f"ржПржкрж┐рж╕рзЛржб {episode_data['episode']} ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")

            random_id = random.randint(1000, 9999)
            ai_content = await generate_ai_content_for_send(user_info["anime"], episode_data["episode"], random_id) # Generate AI content here

            if "error" in ai_content:
                error_messages.append(f"ржПржкрж┐рж╕рзЛржб {episode_data['episode']} AI ржЬрзЗржирж╛рж░рзЗрж╢ржи рждрзНрж░рзБржЯрж┐: {ai_content['error']}")
                continue # Skip API call if AI content generation failed

            episode_data["title"] = ai_content["title"]
            episode_data["description"] = ai_content["description"]


            video_params = {"up": episode_data["facebook_link"]}
            async with aiohttp.ClientSession() as session_video_link: #separate session for video link processing
                async with session_video_link.get("https://helloif-production.up.railway.app/up", params=video_params) as response_video_link:
                    if response_video_link.status == 200:
                        video_data = await response_video_link.json()
                        episode_data["hd_link"] = "рж▓рж┐ржВржХ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐"
                        episode_data["sd_link"] = "рж▓рж┐ржВржХ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐"
                        if video_data.get("success"):
                            episode_data["hd_link"] = video_data["links"].get("hd", episode_data["hd_link"])
                            episode_data["sd_link"] = video_data["links"].get("sd", episode_data["sd_link"])


            api_url = "https://nekofilx.onrender.com/ad"
            params = {
                "a": user_info["anime_number"],
                "s": user_info["season_number"],
                "t": episode_data["title"],
                "720p": episode_data["hd_link"],
                "480p": episode_data["sd_link"],
                "th": user_info["thumbnail_link"],
                "d": episode_data["description"],
                "eps": episode_data["episode"]
            }

            async with aiohttp.ClientSession() as session_api: # separate session for api call
                async with session_api.get(api_url, params=params) as response_api:
                    api_data = await response_api.json()
                    if api_data.get("status") == "success":
                        response_message = (
                            f"тЬЕ ржПржкрж┐рж╕рзЛржб {episode_data['episode']} ржпрзБржХрзНржд ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\n"
                            f"ЁЯОм ржПржирж┐ржорзЗ ржЖржЗржбрж┐: {api_data['anime_id']}\n"
                            f"ЁЯФв рж╕рж┐ржЬржи: {api_data['season']}\n"
                            f"ЁЯУЭ ржорзЗрж╕рзЗржЬ: {api_data['message']}\n\n"
                            "ржнрж┐ржбрж┐ржУ рждржерзНржп:\n"
                            f"ЁЯЖФ ржЖржЗржбрж┐: {api_data['video']['id']}\n"
                            f"ЁЯФв рж╕рж┐рж░рж┐ржпрж╝рж╛рж▓: {api_data['video']['serial']}\n"
                            f"ЁЯОм ржЯрж╛ржЗржЯрзЗрж▓: {api_data['video']['title']}\n"
                            f"ЁЯУЭ ржбрзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи: {api_data['video']['description']}\n"
                            f"ЁЯЦ╝я╕П ржерж╛ржорзНржмржирж╛ржЗрж▓: {api_data['video']['thumbnail']}\n"
                            f"ЁЯФЧ HD: {api_data['video']['links']['720p']}\n"
                            f"ЁЯФЧ SD: {api_data['video']['links']['480p']}"
                        )
                        success_messages.append(response_message)
                        await update.message.reply_text(response_message) # Send success message immediately
                    else:
                        error_message = f"тЭМ ржПржкрж┐рж╕рзЛржб {episode_data['episode']} ржпрзБржХрзНржд ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {api_data.get('message', 'No message')}"
                        error_messages.append(error_message)
                        await update.message.reply_text(error_message) # Send error message immediately

                await asyncio.sleep(5) # рзл рж╕рзЗржХрзЗржирзНржб ржмрж┐рж░рждрж┐

        except Exception as e:
            error_message = f"ржПржкрж┐рж╕рзЛржб {episode_data['episode']} API request error: {str(e)}"
            error_messages.append(error_message)
            await update.message.reply_text(error_message) # Send error message immediately


    if error_messages and not success_messages: # if only errors, send summary of errors
        final_response_message = "тЪая╕П ржХрж┐ржЫрзБ ржПржкрж┐рж╕рзЛржб ржпрзБржХрзНржд ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ:\n" + "\n".join(error_messages)
        await update.message.reply_text(final_response_message)
    elif error_messages and success_messages: # if both success and error, send success and then error summary
        final_response_message = "тЪая╕П ржХрж┐ржЫрзБ ржПржкрж┐рж╕рзЛржб ржпрзБржХрзНржд ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ:\n" + "\n".join(error_messages)
        await update.message.reply_text(final_response_message)
    elif success_messages and not error_messages: # if only success, no need for extra message, success messages are already sent episode by episode
        pass # Success messages are already sent episode by episode
    elif not success_messages and not error_messages: # no episodes processed
        await update.message.reply_text("ржХрзЛржи ржПржкрж┐рж╕рзЛржб ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржХрж░рж╛ рж╣ржпрж╝ржирж┐ред")


    del user_data[user_id] # ржЗржЙржЬрж╛рж░ ржбрзЗржЯрж╛ ржбрж┐рж▓рж┐ржЯ ржХрж░рзЗ ржжрж┐ржи


def main():
    TOKEN = "7867830008:AAE9ljH11pHuGVRA9XcwGYhoTYVnEP5cvHE"  # ржЖржкржирж╛рж░ ржмржЯрзЗрж░ ржЯрзЛржХрзЗржи
    app = Application.builder().token(TOKEN).build()

    # рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░ ржХрж░рзБржи
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("send", send_data))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))

    # ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржи
    print("ржмржЯ ржЪрж╛рж▓рзБ рж╣ржпрж╝рзЗржЫрзЗ...")
    app.run_polling()

if __name__ == "__main__":
    main()
